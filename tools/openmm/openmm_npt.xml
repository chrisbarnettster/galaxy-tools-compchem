<tool id="openmm_npt" name="OpenMM NPT equilibration" version="@VERSION@">
    <description>- constant-temperature and -pressure equilibration of a system</description>
    <macros>
        <import>macros.xml</import>
    </macros>

    <expand macro="requirements" />

    <command detect_errors="exit_code"><![CDATA[
        ln -s '$inputinpcrd1' input.inpcrd &&
        ln -s '$inputprmtop1' input.prmtop &&
        ln -s '$outputdcd1' trajectory.dcd &&
        ln -s '$outputpdb2' trajectory.pdb &&
        ln -s '$outputdata3' energy.txt &&
        cat '$openmm_npt_script' > '$outputscript4'  &&
        ln -s '$outputscript4' npt.py &&
        ln -s '$outputtgz5' bundle.tgz &&
        tar -zcvf bundle.tgz -h input.prmtop input.inpcrd npt.py &&
        echo python npt.py

    ]]></command>
        <configfiles>
            <!-- .mdp file for the gromacs simulation -->
            <configfile name="openmm_npt_script">
##########################################################################
# this script was initially generated by openmm-builder and has been customized for the NPT use case in Galaxy
##########################################################################

from __future__ import print_function
from simtk.openmm import app
import simtk.openmm as mm
from simtk import unit
from sys import stdout

prmtop = app.amberprmtopfile.AmberPrmtopFile('input.prmtop')
inpcrd = app.amberinpcrdfile.AmberInpcrdFile('input.inpcrd')
system = prmtop.createSystem(nonbondedMethod=app.PME, nonbondedCutoff=1*unit.nanometer,
        constraints=app.HBonds, rigidWater=True,
        ewaldErrorTolerance=0.0005)

integrator = mm.LangevinIntegrator($temp*unit.kelvin, 1.0/unit.picoseconds,
    2.0*unit.femtoseconds)
integrator.setConstraintTolerance(0.00001)
system.addForce(mm.MonteCarloBarostat(1*unit.atmospheres, $temp*unit.kelvin, 25))

platform = mm.Platform.getPlatformByName('$platform')
#if $platform == "CUDA":
properties = {'CudaPrecision': '$precision'}
simulation = app.Simulation(prmtop.topology, system, integrator, platform,
            properties)
#else if $platform == "OpenCL":
properties = {'OpenCLPrecision': '$precision'}
simulation = app.Simulation(prmtop.topology, system, integrator, platform,
            properties)
#else
simulation = app.Simulation(prmtop.topology, system, integrator, platform)
#end if

simulation.context.setPositions(inpcrd.positions)

print('Minimizing...')
simulation.minimizeEnergy()
simulation.context.setVelocitiesToTemperature($temp*unit.kelvin)
print('Equilibrating...')
simulation.step($equilibration_steps)

simulation.reporters.append(app.DCDReporter('trajectory.dcd', $dcd_freq))
simulation.reporters.append(app.PDBReporter('trajectory.pdb', $pdb_freq))
simulation.reporters.append(app.StateDataReporter('energy.txt', $energy_freq, step=True,
    time=True, potentialEnergy=True, kineticEnergy=True, totalEnergy=True,
    temperature=True, volume=True, density=True, progress=True,
    remainingTime=True, speed=True, totalSteps=$production_steps, separator='\t'))

print('Running Production...')
simulation.step($production_steps)
print('Done!')


            </configfile>

        </configfiles>
  <inputs>
        <param type="data" name="inputinpcrd1" label="Amber inpcrd molecular input" format="txt"/>
        <param type="data" name="inputprmtop1" label="Amber prmtop parameter input" format="txt"/>
      <param name="platform" type="select" label="compute platform" help="Specify the compute platform to run on. Default CPU.">
        <option value="CPU">CPU</option>
        <option selected="True" value="CUDA">CUDA</option>
        <option value="OpenCL">OpenCL</option>
        <option value="Reference">Reference</option>
      </param>
      <param name="precision" type="select" label="calculation precision" help="Specify the precision for CUDA/OpenCL. Default mixed.">
        <option selected="True" value="mixed">mixed</option>
        <option value="single">single</option>
        <option value="double">double</option>
      </param>
      <param name="temp"  type="float" value="300.0" label="Temperature (K)"/>
        <param name="equilibration_steps"  type="integer" value="10000" label="Equilibration Simulation Steps"/>
        <param name="production_steps"  type="integer" value="50000000" label="Production Simulation Steps"/>
        <param name="dcd_freq"  type="integer" value="1000" label="DCD State Reporter Frequency"/>
        <param name="pdb_freq"  type="integer" value="50000" label="PDB State Reporter Frequency"/>
        <param name="energy_freq"  type="integer" value="5000" label="Energy State Reporter Frequency"/>
  </inputs>
  <outputs>
    <data format="txt" name="outputdcd1" label="${tool.name}: DCD reporter output"/>
    <data format="txt" name="outputpdb2" label="${tool.name}: PDB reporter output"/>
    <data format="txt" name="outputdata3" label="${tool.name}: State Data reporter output"/>
    <data format="txt" name="outputscript4" label="${tool.name}: NPT script output"/>
    <data format="txt" name="outputtgz5" label="${tool.name}: TGZ bundle output"/>
  </outputs>
  <help>
    <![CDATA[
.. class:: infomark

**What it does**

Create an OpenMM script for NPT calculations based on AMBER inputs. 

.. class:: infomark

**How it works**

- Select an input prmtop and inpcrd file
- Specify system parameters (such as temperature, number of MD steps)
- Specify CPU or GPU (CUDA) platform

.. class:: infomark

**Outputs created**

- DCD trajectory, PDB trajectory, energy (state data) and NPT input script

.. class:: infomark

**User guide and documentation**

- AmberTools `userguide`_


.. _`userguide`: http://ambermd.org/doc12/Amber19.pdf

.. class:: infomark

**Known issues**

- If datatype is mol not mol2, tleap will crash. Does not matter if a soft link is used. Fix - edit the datatype and set it to be mol2 (this is not available in the upload and must be done after).

]]>
  </help>
  <expand macro="citations"/>
</tool>

